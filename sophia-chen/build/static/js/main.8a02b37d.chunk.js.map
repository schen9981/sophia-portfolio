{"version":3,"sources":["assets/cropped.png","assets/sophia-resume.pdf","components/NavBar/NavBar.tsx","pages/Home/Home.tsx","pages/About/About.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","NavBar","props","state","className","Navbar","collapseOnSelect","expand","style","alignItems","paddingLeft","Toggle","aria-controls","Collapse","id","Nav","Link","href","resumeFile","target","React","Component","Home","src","profilePic","About","history","createBrowserHistory","App","console","log","process","basename","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,2C,yVCetBC,E,kDACnB,WAAYC,GAAqB,IAAD,8BAC9B,cAAMA,IACDC,MAAQ,GAFiB,E,qDAM9B,OACE,yBAAKC,UAAU,UACb,kBAACC,EAAA,EAAD,CACEC,kBAAgB,EAChBC,OAAO,KACPC,MAAO,CACLC,WAAY,SACZC,YAAa,SAGf,kBAACL,EAAA,EAAOM,OAAR,CAAeC,gBAAc,0BAC7B,kBAACP,EAAA,EAAOQ,SAAR,CAAiBC,GAAG,wBAAwBV,UAAU,iBACpD,kBAACW,EAAA,EAAD,CAAKX,UAAU,WACb,kBAACW,EAAA,EAAIC,KAAL,CAAUZ,UAAU,cAAca,KAAK,SAAvC,SACA,kBAACF,EAAA,EAAIC,KAAL,CAAUZ,UAAU,mBAAmBa,KAAK,QAA5C,QACA,kBAACF,EAAA,EAAIC,KAAL,CAAUZ,UAAU,mBAAmBa,KAAMC,IAAYC,OAAO,UAAhE,kB,GAtBsBC,IAAMC,WCNrBC,E,kDACnB,WAAYpB,GAAmB,IAAD,8BAC5B,cAAMA,IACDC,MAAQ,GAFe,E,qDAO5B,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBAEf,kBAAC,EAAD,MACA,yBAAKA,UAAU,WAEb,yBAAKA,UAAU,eACb,yBAAKmB,IAAKC,OAGZ,yBAAKpB,UAAU,gBAGf,yBAAKA,UAAU,eAGf,yBAAKA,UAAU,QACb,oD,GA1BsBgB,IAAMC,WCAnBI,G,wDACnB,WAAYvB,GAAoB,IAAD,8BAC7B,cAAMA,IACDC,MAAQ,GAFgB,E,qDAO7B,OACE,yBAAKC,UAAU,SACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,QACb,yBAAKA,UAAU,eACb,yBAAKmB,IAAKC,OAGZ,yBAAKpB,UAAU,gBAGf,yBAAKA,UAAU,QACb,oD,GApBuBgB,IAAMC,Y,OCEnCK,EAAUC,cAEKC,E,kDACnB,WAAY1B,GAAkB,IAAD,8BAC3B,cAAMA,IACDC,MAAQ,GAFc,E,qDAQ3B,OADA0B,QAAQC,IAAIC,oHAEV,kBAAC,IAAD,CAAQL,QAASA,EAASM,SAAS,KAC/B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,yBAAK7B,UAAU,OACb,kBAAC,EAAD,QAGJ,kBAAC,IAAD,CAAO6B,KAAK,SACV,yBAAK7B,UAAU,OACb,kBAAC,EAAD,QAGJ,kBAAC,IAAD,CAAO8B,OAAK,EAACD,KAAK,KAChB,yBAAK7B,UAAU,OACb,kBAAC,EAAD,c,GAxBiBgB,IAAMC,WCDnBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.8a02b37d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cropped.f4fc06dd.png\";","module.exports = __webpack_public_path__ + \"static/media/sophia-resume.76bd66c2.pdf\";","import React from \"react\";\nimport \"./NavBar.css\";\nimport { Nav }  from \"react-bootstrap\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Col from \"react-bootstrap/Col\";\nimport resumeFile from \"../../assets/sophia-resume.pdf\";\n\ntype NavBarProps = {\n\n};\n\ntype NavBarState = {\n\n};\n\nexport default class NavBar extends React.Component<NavBarProps, NavBarState> {\n  constructor(props: NavBarProps) {\n    super(props);\n    this.state = {};\n  }\n\n  render () {\n    return (\n      <div className=\"NavBar\">\n        <Navbar\n          collapseOnSelect\n          expand=\"lg\"\n          style={{\n            alignItems: \"center\",\n            paddingLeft: \"11vw\",\n          }}\n        >\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n          <Navbar.Collapse id=\"responsive-navbar-nav\" className=\"navbar-custom\">\n            <Nav className=\"ml-auto\">\n              <Nav.Link className=\"navbar-elem\" href=\"about\">about</Nav.Link>\n              <Nav.Link className=\"ml-5 navbar-elem\" href=\"work\">work</Nav.Link>\n              <Nav.Link className=\"ml-5 navbar-elem\" href={resumeFile} target=\"_blank\">resume</Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport './Home.css'\nimport profilePic from \"../../assets/cropped.png\";\nimport NavBar from '../../components/NavBar/NavBar';\n\ntype HomeProps = {};\n\ntype HomeState = {};\n\nexport default class Home extends React.Component<HomeProps, HomeState> {\n  constructor(props: HomeProps) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"Home\">\n        <div className=\"green-circle\">\n        </div>\n        <NavBar />\n        <div className=\"welcome\">\n\n          <div className=\"profile-pic\">\n            <img src={profilePic}></img>\n          </div>\n\n          <div className=\"pink-circle\">\n          </div>\n\n          <div className=\"red-circle\">\n          </div>\n\n          <div className=\"name\">\n            <h1> SOPHIA CHEN </h1>\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport './About.css'\nimport profilePic from \"../../assets/cropped.png\";\nimport NavBar from '../../components/NavBar/NavBar';\n\ntype AboutProps = {};\n\ntype AboutState = {};\n\nexport default class About extends React.Component<AboutProps, AboutState> {\n  constructor(props: AboutProps) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"About\">\n        <NavBar />\n        <div className=\"info\">\n          <div className=\"profile-pic\">\n            <img src={profilePic}></img>\n          </div>\n\n          <div className=\"pink-circle\">\n          </div>\n\n          <div className=\"name\">\n            <h1> SOPHIA CHEN </h1>\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch, Redirect} from 'react-router-dom';\nimport Home from \"./pages/Home/Home\";\nimport About from \"./pages/About/About\";\nimport {createBrowserHistory} from \"history\";\n\ntype AppProps = {};\n\ntype AppState = {};\n\nconst history = createBrowserHistory();\n\nexport default class App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  render() {\n    console.log(process.env);\n    return (\n      <Router history={history} basename=\"/\">\n          <Switch>\n            <Route path='/about'>\n              <div className=\"App\">\n                <About />\n              </div>\n            </Route>\n            <Route path='/work'>\n              <div className=\"App\">\n                <About />\n              </div>\n            </Route>\n            <Route exact path=\"/\">\n              <div className=\"App\">\n                <Home />\n              </div>\n            </Route>\n          </Switch>\n      </Router>\n    );\n  }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}